// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MyToken {
    // Token details
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;

    // Mapping to keep track of balances
    mapping(address => uint256) public balanceOf;

    // Mapping to store allowances
    mapping(address => mapping(address => uint256)) public allowance;

    // Event emitted on successful transfer
    event Transfer(address indexed from, address indexed to, uint256 value);

    // Event emitted on successful approval
    event Approval(address indexed owner, address indexed spender, uint256 value);

    // Owner of the contract
    address public owner;

    // Constructor to initialize the token details and set the initial supply
    constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals,
        uint256 _initialSupply
    ) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _initialSupply * 10**uint256(decimals);
        owner = msg.sender; // Set the contract deployer as the owner
        balanceOf[msg.sender] = totalSupply; // Assign all tokens to the owner initially
    }

    // Function to transfer tokens to a specified address
    function transfer(address to, uint256 value) public returns (bool) {
        require(to != address(0), "ERC20: transfer to the zero address");
        require(value <= balanceOf[msg.sender], "ERC20: insufficient balance");

        // Update balances
        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;

        // Emit the Transfer event
        emit Transfer(msg.sender, to, value);

        return true;
    }

    // Function to approve a spender to spend tokens on behalf of the owner
    function approve(address spender, uint256 value) public returns (bool) {
        allowance[msg.sender][spender] = value;

        // Emit the Approval event
        emit Approval(msg.sender, spender, value);

        return true;
    }

    // Function to transfer tokens from one address to another on behalf of the owner
    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        require(to != address(0), "ERC20: transfer to the zero address");
        require(value <= balanceOf[from], "ERC20: insufficient balance");
        require(value <= allowance[from][msg.sender], "ERC20: insufficient allowance");

        // Update balances and allowances
        balanceOf[from] -= value;
        balanceOf[to] += value;
        allowance[from][msg.sender] -= value;

        // Emit the Transfer event
        emit Transfer(from, to, value);

        return true;
    }
}
