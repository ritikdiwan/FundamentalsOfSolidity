// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MyERC721Token {
    // Token details
    string public name;
    string public symbol;

    // Counter for unique token IDs
    uint256 private tokenIdCounter;

    // Mapping to store token owners
    mapping(uint256 => address) public tokenOwner;

    // Mapping to store token metadata
    mapping(uint256 => string) public tokenMetadata;

    // Event emitted on successful transfer
    event Transfer(address indexed from, address indexed to, uint256 tokenId);

    // Event emitted on successful approval
    event Approval(address indexed owner, address indexed spender, uint256 tokenId);

    // Mapping to store allowances for spending tokens
    mapping(address => mapping(address => bool)) private approved;

    // Constructor to initialize the token details
    constructor(string memory _name, string memory _symbol) {
        name = _name;
        symbol = _symbol;
        tokenIdCounter = 0;
    }

    // Function to mint a new token
    function mint(address to, string memory metadata) public {
        uint256 tokenId = tokenIdCounter;
        tokenIdCounter++;

        // Assign ownership and metadata
        tokenOwner[tokenId] = to;
        tokenMetadata[tokenId] = metadata;

        // Emit the Transfer event
        emit Transfer(address(0), to, tokenId);
    }

    // Function to get the owner of a token
    function ownerOf(uint256 tokenId) public view returns (address) {
        return tokenOwner[tokenId];
    }

    // Function to transfer a token to another address
    function transfer(address to, uint256 tokenId) public {
        require(msg.sender == tokenOwner[tokenId], "ERC721: sender is not the owner");
        require(to != address(0), "ERC721: transfer to the zero address");

        // Update ownership
        tokenOwner[tokenId] = to;

        // Emit the Transfer event
        emit Transfer(msg.sender, to, tokenId);
    }

    // Function to approve another address to spend a token on behalf of the owner
    function approve(address spender, uint256 tokenId) public {
        address owner = tokenOwner[tokenId];
        require(spender != owner, "ERC721: approval to current owner");
        approved[owner][spender] = true;

        // Emit the Approval event
        emit Approval(owner, spender, tokenId);
    }

    // Function to transfer a token from one address to another on behalf of the owner
    function transferFrom(address from, address to, uint256 tokenId) public {
        require(approved[from][msg.sender], "ERC721: sender not approved");
        require(msg.sender == tokenOwner[tokenId], "ERC721: sender is not the owner");
        require(to != address(0), "ERC721: transfer to the zero address");

        // Update ownership and approval
        tokenOwner[tokenId] = to;
        approved[from][msg.sender] = false;

        // Emit the Transfer event
        emit Transfer(from, to, tokenId);
    }
}
